<?php
/**
 * GetFulfilmentOrderUnitResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SMS\Suppliers
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier API
 *
 * This documentation describes SMS Suppliers API. To be able use this API you should have an api-key and api-username
 *
 * OpenAPI spec version: 1.9.2
 * Contact: sms.tech@real-digital.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SMS\Suppliers\Model;

use \ArrayAccess;

/**
 * GetFulfilmentOrderUnitResponse Class Doc Comment
 *
 * @category    Class
 * @package     SMS\Suppliers
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetFulfilmentOrderUnitResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetFulfilmentOrderUnitResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_order_unit' => 'int',
        'created_at' => 'string',
        'status' => 'string',
        'condition' => 'string',
        'handling_costs' => 'float',
        'freight_costs' => 'float',
        'cancel_reason' => 'string',
        'is_cancelled' => 'bool',
        'item' => '\SMS\Suppliers\Model\Item',
        'sku' => 'string',
        'price' => 'float',
        'delivery_time_expires' => 'string',
        'customer_order_unit_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_order_unit' => null,
        'created_at' => null,
        'status' => null,
        'condition' => null,
        'handling_costs' => null,
        'freight_costs' => null,
        'cancel_reason' => null,
        'is_cancelled' => null,
        'item' => null,
        'sku' => null,
        'price' => null,
        'delivery_time_expires' => null,
        'customer_order_unit_status' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id_order_unit' => 'id_order_unit',
        'created_at' => 'created_at',
        'status' => 'status',
        'condition' => 'condition',
        'handling_costs' => 'handling_costs',
        'freight_costs' => 'freight_costs',
        'cancel_reason' => 'cancel_reason',
        'is_cancelled' => 'is_cancelled',
        'item' => 'item',
        'sku' => 'sku',
        'price' => 'price',
        'delivery_time_expires' => 'delivery_time_expires',
        'customer_order_unit_status' => 'customer_order_unit_status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id_order_unit' => 'setIdOrderUnit',
        'created_at' => 'setCreatedAt',
        'status' => 'setStatus',
        'condition' => 'setCondition',
        'handling_costs' => 'setHandlingCosts',
        'freight_costs' => 'setFreightCosts',
        'cancel_reason' => 'setCancelReason',
        'is_cancelled' => 'setIsCancelled',
        'item' => 'setItem',
        'sku' => 'setSku',
        'price' => 'setPrice',
        'delivery_time_expires' => 'setDeliveryTimeExpires',
        'customer_order_unit_status' => 'setCustomerOrderUnitStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id_order_unit' => 'getIdOrderUnit',
        'created_at' => 'getCreatedAt',
        'status' => 'getStatus',
        'condition' => 'getCondition',
        'handling_costs' => 'getHandlingCosts',
        'freight_costs' => 'getFreightCosts',
        'cancel_reason' => 'getCancelReason',
        'is_cancelled' => 'getIsCancelled',
        'item' => 'getItem',
        'sku' => 'getSku',
        'price' => 'getPrice',
        'delivery_time_expires' => 'getDeliveryTimeExpires',
        'customer_order_unit_status' => 'getCustomerOrderUnitStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_order_unit'] = isset($data['id_order_unit']) ? $data['id_order_unit'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['handling_costs'] = isset($data['handling_costs']) ? $data['handling_costs'] : null;
        $this->container['freight_costs'] = isset($data['freight_costs']) ? $data['freight_costs'] : null;
        $this->container['cancel_reason'] = isset($data['cancel_reason']) ? $data['cancel_reason'] : null;
        $this->container['is_cancelled'] = isset($data['is_cancelled']) ? $data['is_cancelled'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['delivery_time_expires'] = isset($data['delivery_time_expires']) ? $data['delivery_time_expires'] : null;
        $this->container['customer_order_unit_status'] = isset($data['customer_order_unit_status']) ? $data['customer_order_unit_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id_order_unit'] === null) {
            $invalid_properties[] = "'id_order_unit' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalid_properties[] = "'condition' can't be null";
        }
        if ($this->container['handling_costs'] === null) {
            $invalid_properties[] = "'handling_costs' can't be null";
        }
        if ($this->container['freight_costs'] === null) {
            $invalid_properties[] = "'freight_costs' can't be null";
        }
        if ($this->container['cancel_reason'] === null) {
            $invalid_properties[] = "'cancel_reason' can't be null";
        }
        if ($this->container['is_cancelled'] === null) {
            $invalid_properties[] = "'is_cancelled' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalid_properties[] = "'item' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalid_properties[] = "'sku' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['delivery_time_expires'] === null) {
            $invalid_properties[] = "'delivery_time_expires' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_order_unit'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['condition'] === null) {
            return false;
        }
        if ($this->container['handling_costs'] === null) {
            return false;
        }
        if ($this->container['freight_costs'] === null) {
            return false;
        }
        if ($this->container['cancel_reason'] === null) {
            return false;
        }
        if ($this->container['is_cancelled'] === null) {
            return false;
        }
        if ($this->container['item'] === null) {
            return false;
        }
        if ($this->container['sku'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['delivery_time_expires'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_order_unit
     * @return int
     */
    public function getIdOrderUnit()
    {
        return $this->container['id_order_unit'];
    }

    /**
     * Sets id_order_unit
     * @param int $id_order_unit
     * @return $this
     */
    public function setIdOrderUnit($id_order_unit)
    {
        $this->container['id_order_unit'] = $id_order_unit;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets condition
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param string $condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets handling_costs
     * @return float
     */
    public function getHandlingCosts()
    {
        return $this->container['handling_costs'];
    }

    /**
     * Sets handling_costs
     * @param float $handling_costs
     * @return $this
     */
    public function setHandlingCosts($handling_costs)
    {
        $this->container['handling_costs'] = $handling_costs;

        return $this;
    }

    /**
     * Gets freight_costs
     * @return float
     */
    public function getFreightCosts()
    {
        return $this->container['freight_costs'];
    }

    /**
     * Sets freight_costs
     * @param float $freight_costs
     * @return $this
     */
    public function setFreightCosts($freight_costs)
    {
        $this->container['freight_costs'] = $freight_costs;

        return $this;
    }

    /**
     * Gets cancel_reason
     * @return string
     */
    public function getCancelReason()
    {
        return $this->container['cancel_reason'];
    }

    /**
     * Sets cancel_reason
     * @param string $cancel_reason
     * @return $this
     */
    public function setCancelReason($cancel_reason)
    {
        $this->container['cancel_reason'] = $cancel_reason;

        return $this;
    }

    /**
     * Gets is_cancelled
     * @return bool
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     * @param bool $is_cancelled
     * @return $this
     */
    public function setIsCancelled($is_cancelled)
    {
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets item
     * @return \SMS\Suppliers\Model\Item
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     * @param \SMS\Suppliers\Model\Item $item
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets delivery_time_expires
     * @return string
     */
    public function getDeliveryTimeExpires()
    {
        return $this->container['delivery_time_expires'];
    }

    /**
     * Sets delivery_time_expires
     * @param string $delivery_time_expires
     * @return $this
     */
    public function setDeliveryTimeExpires($delivery_time_expires)
    {
        $this->container['delivery_time_expires'] = $delivery_time_expires;

        return $this;
    }

    /**
     * Gets customer_order_unit_status
     * @return string
     */
    public function getCustomerOrderUnitStatus()
    {
        return $this->container['customer_order_unit_status'];
    }

    /**
     * Sets customer_order_unit_status
     * @param string $customer_order_unit_status
     * @return $this
     */
    public function setCustomerOrderUnitStatus($customer_order_unit_status)
    {
        $this->container['customer_order_unit_status'] = $customer_order_unit_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SMS\Suppliers\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SMS\Suppliers\ObjectSerializer::sanitizeForSerialization($this));
    }
}


